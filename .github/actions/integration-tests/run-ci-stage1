#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

SCRIPT_DIR=$(dirname $0)
SCRIPT_DIR=$(readlink -e ${SCRIPT_DIR})

. ${SCRIPT_DIR}/base

CI_RUN_ENVIRONMENT="standalone"

CI_SCENARIOS="fio"

CI_USERENVS="rhubi8"

CI_SAMPLES=1

CI_REPEAT_RUNS="no"

CI_ENDPOINT="remotehost"

CI_VERBOSE=0

longopts="scenarios:,userenvs:,samples:,repeat-runs:,run-environment:,ci-endpoint:"
opts=$(getopt -q -o "" --longoptions "${longopts}" -n "$0" -- "$@")
if [ ${?} -ne 0 ]; then
    echo "ERROR: Unrecognized option specified: $@"
    exit 1
fi
eval set -- "${opts}"
while true; do
    case "${1}" in
        --ci-endpoint)
            shift
            CI_ENDPOINT="${1}"
            shift
            ;;
        --run-environment)
            shift
            CI_RUN_ENVIRONMENT="${1}"
            shift
            ;;
        --scenarios)
            shift
            CI_SCENARIOS="${1}"
            shift
            ;;
        --userenvs)
            shift
            CI_USERENVS="${1}"
            shift
            ;;
        --samples)
            shift
            CI_SAMPLES="${1}"
            shift
            ;;
        --repeat-runs)
            shift
            CI_REPEAT_RUNS="${1}"
            shift
            ;;
        --verbose)
            shift
            CI_VERBOSE=1
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "ERROR: Unexpected argument [${1}]"
            shift
            break
            ;;
    esac
done

# validate inputs
validate_ci_run_environment
validate_ci_endpoint

for scenario in $(echo "${CI_SCENARIOS}" | sed -e "s/,/ /g"); do
    case "${scenario}" in
        fio|uperf|iperf)
            ;;
        *)
            echo "ERROR: Unknown CI scenario [${scenario}]"
            exit 1
            ;;
    esac
done

case "${CI_REPEAT_RUNS}" in
    yes|no)
        ;;
    *)
        echo "ERROR: Unknown value for --repeat-runs [${CI_REPEAT_RUNS}].  Acceptable values are 'yes' and 'no'."
        exit 1
        ;;
esac

CI_ACTIVE_USERENVS=""
for userenv in $(echo "${CI_USERENVS}" | sed -e "s/,/ /g"); do
    case "${userenv}" in
        all)
            CI_ACTIVE_USERENVS=""
            for userenv in $(pushd /opt/crucible/subprojects/core/rickshaw/userenvs > /dev/null; ls -1 *.json; popd > /dev/null); do
                userenv=$(echo "${userenv}" | sed -e "s/\.json$//")
                CI_ACTIVE_USERENVS+="${userenv} "
            done
            break
            ;;
        *)
            if [ -e /opt/crucible/subprojects/core/rickshaw/userenvs/${userenv}.json ]; then
                CI_ACTIVE_USERENVS+="${userenv} "
            else
                echo "ERROR: Unknown userenv specified [${userenv}]"
                exit 1
            fi
            ;;
    esac
done

RC_STATUS=0

function run_cmd {
    local cmd rc header force
    cmd=${1}
    shift
    force=${1:-"no"}
    shift

    if [ "${force}" != "no" -o ${RC_STATUS} == 0 ]; then
        header="Running: ${cmd}"
        if [ "${force}" != "no" ]; then
            header+=" (forced)"
        fi
        start_github_group "${header}"
        echo "${header}"
        echo
        ${cmd}
        rc=${?}

        log_rc ${rc}
        echo
        echo

        if [ ${RC_STATUS} == 0 ]; then
            RC_STATUS=${rc}
        fi

        stop_github_group
    else
        if [ ${CI_VERBOSE} == 1 ]; then
            header="Skipping: ${cmd}"
            start_github_group "${header}"
            echo "${header}"
            echo
            echo
            stop_github_group
        fi
    fi
}

function run_and_capture_cmd {
    local cmd rc header
    cmd=${1}
    shift

    if [ ${RC_STATUS} == 0 ]; then
        header="Running and capturing: ${cmd}"
        start_github_group "${header}"
        echo "${header}"
        echo
        captured_output=$(${cmd})
        rc=${?}
        echo "captured_output=${captured_output}"

        log_rc ${rc}
        echo
        echo

        if [ ${RC_STATUS} == 0 ]; then
            RC_STATUS=${rc}
        fi

        stop_github_group
    else
        if [ ${CI_VERBOSE} == 1 ]; then
            header="Skipping capture: ${cmd}"
            start_github_group "${header}"
            echo "${header}"
            echo
            echo
            stop_github_group
        fi
    fi
}

function post_run_cmd {
    run_and_capture_cmd "crucible extract run-id /var/lib/crucible/run/latest"

    run_cmd "crucible rm --run ${captured_output}"

    run_cmd "crucible ls --result-dir /var/lib/crucible/run/latest --type run-id"

    run_cmd "crucible ls --result-dir /var/lib/crucible/run/latest"

    run_cmd "crucible tags --result-dir /var/lib/crucible/run/latest"

    run_cmd "crucible tags --result-dir /var/lib/crucible/run/latest --action add --tags crucible-ci:post_run_cmd --tags testing1:value1 --tags testing2:value2"

    run_cmd "crucible tags --result-dir /var/lib/crucible/run/latest --action remove --tags testing1 --tags testing2"
}

function remove_microk8s_images {
    for image in $(microk8s ctr images list "name~=client-server" | grep -v REF | awk '{ print $1 }'); do
        microk8s ctr images remove --sync ${image}
    done
}

run_cmd "cat /etc/sysconfig/crucible"

run_cmd "crucible help"

run_cmd "crucible repo info"

# some endpoints (such as k8s) will require a "remote" address for the
# controller to allow connectivity from separate network namespaces
# (ie. a pod); provide this by determining which device is used for
# the default route and then getting the IP address for this device;
# then below this information can be used where needed
CONTROLLER_DEFAULT_ROUTE_DEV=$(ip route | grep default | sed -E "s/.*dev\s(\w+)\s.*/\1/")
CONTROLLER_IP=$(ip addr show dev ${CONTROLLER_DEFAULT_ROUTE_DEV} | egrep "inet\s" | sed -E "s/.*inet\s([0-9\.]+)\/.*/\1/")

for userenv in ${CI_ACTIVE_USERENVS}; do
    if [ ${CI_VERBOSE} == 0 -a ${RC_STATUS} != 0 ]; then
        break
    fi

    header="Current userenv is ${userenv}"
    start_github_group "${header}"
    echo -e "*** ${header} ***\n"
    stop_github_group

    for scenario in $(echo "${CI_SCENARIOS}" | sed -e "s/,/ /g"); do
        if [ ${CI_VERBOSE} == 0 -a ${RC_STATUS} != 0 ]; then
            break
        fi

        header="Current scenario is ${scenario}"
        start_github_group "${header}"
        echo -e "### ${header} ###\n"
        stop_github_group

        TAGS=",repeat:${CI_REPEAT_RUNS},userenv:${userenv}"

        case "${scenario}" in
            iperf)
                case "${CI_ENDPOINT}" in
                    k8s)
                        ENDPOINT_ARG="--endpoint k8s,controller-ip:${CONTROLLER_IP},host:localhost,user:root,userenv:${userenv},kubeconfig:0,client:1-2,server:1-2"
                        ;;
                    remotehost)
                        ENDPOINT_ARG="--endpoint remotehost,host:localhost,user:root,userenv:${userenv},osruntime:podman,client:1 --endpoint remotehost,host:localhost,user:root,userenv:${userenv},osruntime:podman,server:1"
                        ;;
                esac

                run_cmd "crucible run iperf --tags run:1${TAGS} --num-samples ${CI_SAMPLES} --test-order s --mv-params ${SCRIPT_DIR}/mv-params/iperf-1.json ${ENDPOINT_ARG}"
                post_run_cmd

                if [ "${CI_REPEAT_RUNS}" == "yes" ]; then
                    run_cmd "crucible run iperf --tags run:2${TAGS} --num-samples ${CI_SAMPLES} --test-order r --mv-params ${SCRIPT_DIR}/mv-params/iperf-2.json ${ENDPOINT_ARG}"
                    post_run_cmd
                fi
                ;;
            fio)
                case "${CI_ENDPOINT}" in
                    k8s)
                        ENDPOINT_ARG="--endpoint k8s,controller-ip:${CONTROLLER_IP},host:localhost,user:root,userenv:${userenv},kubeconfig:0,client:1-2"
                        ;;
                    remotehost)
                        ENDPOINT_ARG="--endpoint remotehost,host:localhost,user:root,userenv:${userenv},osruntime:podman,client:1"
                        ;;
                esac

                run_cmd "crucible run fio --tags run:1${TAGS} --num-samples ${CI_SAMPLES} --test-order s --mv-params /opt/crucible/tests/end-to-end/fio-1.json ${ENDPOINT_ARG}"
                post_run_cmd

                if [ "${CI_REPEAT_RUNS}" == "yes" ]; then
                    run_cmd "crucible run fio --tags run:2${TAGS} --num-samples ${CI_SAMPLES} --test-order r --mv-params /opt/crucible/tests/end-to-end/fio-2.json ${ENDPOINT_ARG}"
                    post_run_cmd
                fi
                ;;
            uperf)
                case "${CI_ENDPOINT}" in
                    k8s)
                        ENDPOINT_ARG="--endpoint k8s,controller-ip:${CONTROLLER_IP},host:localhost,user:root,userenv:${userenv},kubeconfig:0,client:1-2,server:1-2"
                        ;;
                    remotehost)
                        ENDPOINT_ARG="--endpoint remotehost,host:localhost,user:root,userenv:${userenv},osruntime:podman,client:1 --endpoint remotehost,host:localhost,user:root,userenv:${userenv},osruntime:podman,server:1"
                        ;;
                esac

                run_cmd "crucible run uperf --tags run:1${TAGS} --num-samples ${CI_SAMPLES} --test-order s --mv-params /opt/crucible/tests/end-to-end/uperf-1.json ${ENDPOINT_ARG}"
                post_run_cmd

                if [ "${CI_REPEAT_RUNS}" == "yes" ]; then
                    run_cmd "crucible run uperf --tags run:2${TAGS} --num-samples ${CI_SAMPLES} --test-order r --mv-params /opt/crucible/tests/end-to-end/uperf-2.json ${ENDPOINT_ARG}"
                    post_run_cmd
                fi
                ;;
        esac
    done

    run_cmd "df -h"
    case "${CI_ENDPOINT}" in
        k8s)
            run_cmd "remove_microk8s_images"
            ;;
        remotehost)
            run_cmd "rm -Rfv /home/crucible-containers/*"
            ;;
    esac
    run_cmd "df -h"
done

run_cmd "crucible ls --type run-id"

run_cmd "crucible ls --type tags"

run_cmd "crucible es init"

run_cmd "crucible es rebuild"

for scenario in $(echo "${CI_SCENARIOS}" | sed -e "s/,/ /g"); do
    run_cmd "crucible archive /var/lib/crucible/run/${scenario}*"

    run_cmd "crucible unarchive /var/lib/crucible/archive/${scenario}*"
done

run_cmd "crucible log info" "force"

run_cmd "crucible log view" "force"

run_cmd "podman ps --all --external" "force"

run_cmd "crucible update"

case "${CI_ENDPOINT}" in
    k8s)
        run_cmd "ssh root@localhost kubectl get nodes" "force"

        run_cmd "ssh root@localhost kubectl get pods" "force"

        run_cmd "microk8s ctr images list" "force"
        ;;
    remotehost)
        run_cmd "podman ps --all --external" "force"

        run_cmd "podman images" "force"

        run_cmd "ls -laR /home/crucible-containers" "force"
        ;;
esac

run_cmd "df -h" "force"

if [ "${CI_RUN_ENVIRONMENT}" == "github" ]; then
    start_github_group "Artifact Processing"
    if pushd /var/lib > /dev/null; then
        if [ ! -d "crucible" ]; then
            echo "ERROR: /var/lib/crucible does not exist for creating an artifact"
            exit 1
        fi

        tarball="crucible-ci-artifact_$(uuidgen).tar"
        echo "Creating ${tarball} from /var/lib/crucible"
        if tar -cf ${tarball} crucible; then
            echo "Compressing ${tarball} with xz"
            if ! xz -v -T0 ${tarball}; then
                echo "ERROR: Failed to xz compress ${tarball}"
                exit 1
            fi
        else
            echo "ERROR: Failed to create tar archive of /var/lib/crucible"
            exit 1
        fi

        popd > /dev/null
    else
        echo "ERROR: Could not pushd to /var/lib"
        exit 1
    fi
    stop_github_group

    start_github_group "Return code processing"
    stage1_exit_status_file="/tmp/run-ci-stage1-exit-status"
    echo "Logging stage 1 exit status ${RC_STATUS} to ${stage1_exit_status_file}"
    echo "${RC_STATUS}" > ${stage1_exit_status_file}
    stop_github_group

    exit 0
elif [ "${CI_RUN_ENVIRONMENT}" == "standalone" ]; then
    exit ${RC_STATUS}
fi
